{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nconst speechToText = options => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState(\"\");\n  const recognitionRef = useRef(null);\n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window)) {\n      console.error(\"Web speech API is not supported.\");\n      return;\n    }\n    recognitionRef.current = new window.webkitSpeechRecognition();\n    const recognition = recognitionRef.current;\n    recognition.interimResults = options.interimResults || true;\n    recognition.lang = \"vi-VN\";\n    recognition.continuous = options.continuous || false;\n    if ('webkitSpeechGrammarList' in window) {\n      const speechRecognitionList = new window.webkitSpeechGrammarList();\n      recognition.grammars = speechRecognitionList;\n    }\n    recognition.onresult = event => {\n      let text = \"\";\n      for (let i = 0; i < event.results.length; i++) {\n        text += event.results[i][0].transcript;\n      }\n      setTranscript(text);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n    recognition.onend = () => {\n      setIsListening(false);\n      setTranscript(\"\");\n    };\n    return () => {\n      recognition.stop();\n    };\n  }, []);\n  const startListening = () => {\n    if (recognitionRef.current && !isListening) {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n  const stopListening = () => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n  return isListening, transcript, startListening, stopListening;\n};\n_s(speechToText, \"QnnGFSlBl1NXLKFdyXw22FJ8iG4=\");\nexport default speechToText;","map":{"version":3,"names":["React","useEffect","useRef","useState","speechToText","options","_s","isListening","setIsListening","transcript","setTranscript","recognitionRef","window","console","error","current","webkitSpeechRecognition","recognition","interimResults","lang","continuous","speechRecognitionList","webkitSpeechGrammarList","grammars","onresult","event","text","i","results","length","onerror","onend","stop","startListening","start","stopListening"],"sources":["C:/Users/Tran Anh Duc/Downloads/Web Sign React/src/speechToText.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\n\r\nconst speechToText = (options) => {\r\n    const [isListening, setIsListening] = useState(false)\r\n    const [transcript, setTranscript] = useState(\"\")\r\n    const recognitionRef = useRef(null)\r\n\r\n    useEffect(()=>{\r\n        if(!('webkitSpeechRecognition' in window)) {\r\n            console.error(\"Web speech API is not supported.\")\r\n            return;\r\n        }\r\n\r\n        recognitionRef.current = new window.webkitSpeechRecognition()\r\n        const recognition = recognitionRef.current\r\n        recognition.interimResults = options.interimResults || true\r\n        recognition.lang = \"vi-VN\"\r\n        recognition.continuous = options.continuous || false\r\n\r\n        if('webkitSpeechGrammarList' in window){\r\n            const speechRecognitionList = new window.webkitSpeechGrammarList()\r\n            recognition.grammars = speechRecognitionList\r\n        }\r\n\r\n        recognition.onresult = (event) => {\r\n            let text = \"\"\r\n            for(let i = 0; i < event.results.length; i++){\r\n                text += event.results[i][0].transcript\r\n            }\r\n            setTranscript(text)\r\n        }\r\n\r\n        recognition.onerror = (event) => {\r\n            console.error(\"Speech recognition error:\", event.error)\r\n        }\r\n\r\n        recognition.onend = () => {\r\n            setIsListening(false)\r\n            setTranscript(\"\")\r\n        }\r\n\r\n        return () => {\r\n            recognition.stop()\r\n        }\r\n    }, [])\r\n\r\n    const startListening = () => {\r\n        if(recognitionRef.current && !isListening) {\r\n            recognitionRef.current.start()\r\n            setIsListening(true)\r\n        }\r\n    }\r\n\r\n    const stopListening = () => {\r\n        if(recognitionRef.current && isListening) {\r\n            recognitionRef.current.stop()\r\n            setIsListening(false)\r\n        }\r\n    }\r\n\r\n  return (\r\n    isListening,\r\n    transcript,\r\n    startListening,\r\n    stopListening\r\n  )\r\n}\r\n\r\nexport default speechToText\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAE1D,MAAMC,YAAY,GAAIC,OAAO,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMQ,cAAc,GAAGT,MAAM,CAAC,IAAI,CAAC;EAEnCD,SAAS,CAAC,MAAI;IACV,IAAG,EAAE,yBAAyB,IAAIW,MAAM,CAAC,EAAE;MACvCC,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAC;MACjD;IACJ;IAEAH,cAAc,CAACI,OAAO,GAAG,IAAIH,MAAM,CAACI,uBAAuB,CAAC,CAAC;IAC7D,MAAMC,WAAW,GAAGN,cAAc,CAACI,OAAO;IAC1CE,WAAW,CAACC,cAAc,GAAGb,OAAO,CAACa,cAAc,IAAI,IAAI;IAC3DD,WAAW,CAACE,IAAI,GAAG,OAAO;IAC1BF,WAAW,CAACG,UAAU,GAAGf,OAAO,CAACe,UAAU,IAAI,KAAK;IAEpD,IAAG,yBAAyB,IAAIR,MAAM,EAAC;MACnC,MAAMS,qBAAqB,GAAG,IAAIT,MAAM,CAACU,uBAAuB,CAAC,CAAC;MAClEL,WAAW,CAACM,QAAQ,GAAGF,qBAAqB;IAChD;IAEAJ,WAAW,CAACO,QAAQ,GAAIC,KAAK,IAAK;MAC9B,IAAIC,IAAI,GAAG,EAAE;MACb,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,OAAO,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAC;QACzCD,IAAI,IAAID,KAAK,CAACG,OAAO,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAClB,UAAU;MAC1C;MACAC,aAAa,CAACgB,IAAI,CAAC;IACvB,CAAC;IAEDT,WAAW,CAACa,OAAO,GAAIL,KAAK,IAAK;MAC7BZ,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEW,KAAK,CAACX,KAAK,CAAC;IAC3D,CAAC;IAEDG,WAAW,CAACc,KAAK,GAAG,MAAM;MACtBvB,cAAc,CAAC,KAAK,CAAC;MACrBE,aAAa,CAAC,EAAE,CAAC;IACrB,CAAC;IAED,OAAO,MAAM;MACTO,WAAW,CAACe,IAAI,CAAC,CAAC;IACtB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB,IAAGtB,cAAc,CAACI,OAAO,IAAI,CAACR,WAAW,EAAE;MACvCI,cAAc,CAACI,OAAO,CAACmB,KAAK,CAAC,CAAC;MAC9B1B,cAAc,CAAC,IAAI,CAAC;IACxB;EACJ,CAAC;EAED,MAAM2B,aAAa,GAAGA,CAAA,KAAM;IACxB,IAAGxB,cAAc,CAACI,OAAO,IAAIR,WAAW,EAAE;MACtCI,cAAc,CAACI,OAAO,CAACiB,IAAI,CAAC,CAAC;MAC7BxB,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC;EAEH,OACED,WAAW,EACXE,UAAU,EACVwB,cAAc,EACdE,aAAa;AAEjB,CAAC;AAAA7B,EAAA,CAhEKF,YAAY;AAkElB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}