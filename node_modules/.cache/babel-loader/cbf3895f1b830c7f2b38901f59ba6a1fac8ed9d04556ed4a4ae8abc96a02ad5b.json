{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tran Anh Duc\\\\Downloads\\\\Web Sign React\\\\src\\\\SearchForm.jsx\",\n  _s = $RefreshSig$();\n/*\r\nimport React, { useState} from 'react';\r\nimport \"./SearchForm.css\";\r\nimport searchAndPlayVideo from \"./searchAndPlayVideo\";\r\nimport VoiceInput from \"./VoiceInput\";\r\n\r\nconst SearchForm = () => {\r\n  const [word, setWord] = useState(\"\");\r\n  const [videoTypes, setVideoTypes] = useState({\r\n    Real: false,\r\n    Animation: false,\r\n    Skeleton: false,\r\n  });\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    if (type === \"checkbox\") {\r\n      setVideoTypes({ ...videoTypes, [value]: checked });\r\n    } else {\r\n      setWord(value);\r\n    }\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    searchAndPlayVideo(word, videoTypes);\r\n  };\r\n\r\n  return (\r\n    <div className=\"text\">\r\n      <form>\r\n        <label htmlFor=\"word\">Nhập từ cần tìm:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"word\"\r\n            name=\"word\"\r\n            placeholder=\"Nhập từ vào đây\"\r\n            value={word}\r\n            onChange={handleInputChange}\r\n          />\r\n        <label htmlFor=\"video-type\">Chọn kiểu video muốn xem:</label>\r\n        {[\"Real\", \"Animation\", \"Skeleton\"].map((type) => (\r\n          <label key={type}>\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"video-type\"\r\n              name=\"video-type\"\r\n              value={type}\r\n              checked={videoTypes[type]}\r\n              onChange={handleInputChange}\r\n            />\r\n            {type}\r\n          </label>\r\n        ))}\r\n        <div className=\"button\">\r\n          <button type=\"button\" id=\"searchButton\" onClick={handleSearch}>\r\n            Tìm kiếm\r\n          </button>\r\n          <VoiceInput word={word} setWord={setWord} />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n\r\n      <label htmlFor=\"video-type\">Chọn kiểu video muốn xem:</label>\r\n    {[\"Real\", \"Animation\", \"Skeleton\"].map((type) => (\r\n      <label key={type}>\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"video-type\"\r\n          name=\"video-type\"\r\n          value={type}\r\n          checked={videoTypes[type]}\r\n          onChange={handleInputChange}\r\n        />\r\n        {type}\r\n      </label>\r\n    ))}\r\n*/\n\nimport React, { useState } from 'react';\nimport \"./SearchForm.css\";\nimport searchAndPlayVideo from \"./searchAndPlayVideo\";\nimport VoiceInput from \"./VoiceInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchForm = () => {\n  _s();\n  const [word, setWord] = useState(\"\");\n  /*\r\n  const [videoTypes, setVideoTypes] = useState({\r\n    Real: false,\r\n    Animation: false,\r\n    Skeleton: false,\r\n  });\r\n  */\n  const handleInputChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    if (type === \"checkbox\") {\n      setVideoTypes({\n        ...videoTypes,\n        [value]: checked\n      });\n    } else {\n      setWord(value);\n    }\n  };\n  const handleSearch = () => {\n    searchAndPlayVideo(word);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"word\",\n        children: \"Nh\\u1EADp t\\u1EEB c\\u1EA7n t\\xECm:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"word\",\n          name: \"word\",\n          placeholder: \"Nh\\u1EADp t\\u1EEB v\\xE0o \\u0111\\xE2y\",\n          value: word,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            id: \"searchButton\",\n            onClick: handleSearch,\n            children: \"T\\xECm ki\\u1EBFm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(VoiceInput, {\n            word: word,\n            setWord: setWord\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchForm, \"KIhUDbJtUcjE+1oNeU7mNfhsQvU=\");\n_c = SearchForm;\nexport default SearchForm;\nvar _c;\n$RefreshReg$(_c, \"SearchForm\");","map":{"version":3,"names":["React","useState","searchAndPlayVideo","VoiceInput","jsxDEV","_jsxDEV","SearchForm","_s","word","setWord","handleInputChange","e","name","value","type","checked","target","setVideoTypes","videoTypes","handleSearch","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","style","display","alignItems","id","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Tran Anh Duc/Downloads/Web Sign React/src/SearchForm.jsx"],"sourcesContent":["/*\r\nimport React, { useState} from 'react';\r\nimport \"./SearchForm.css\";\r\nimport searchAndPlayVideo from \"./searchAndPlayVideo\";\r\nimport VoiceInput from \"./VoiceInput\";\r\n\r\nconst SearchForm = () => {\r\n  const [word, setWord] = useState(\"\");\r\n  const [videoTypes, setVideoTypes] = useState({\r\n    Real: false,\r\n    Animation: false,\r\n    Skeleton: false,\r\n  });\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    if (type === \"checkbox\") {\r\n      setVideoTypes({ ...videoTypes, [value]: checked });\r\n    } else {\r\n      setWord(value);\r\n    }\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    searchAndPlayVideo(word, videoTypes);\r\n  };\r\n\r\n  return (\r\n    <div className=\"text\">\r\n      <form>\r\n        <label htmlFor=\"word\">Nhập từ cần tìm:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"word\"\r\n            name=\"word\"\r\n            placeholder=\"Nhập từ vào đây\"\r\n            value={word}\r\n            onChange={handleInputChange}\r\n          />\r\n        <label htmlFor=\"video-type\">Chọn kiểu video muốn xem:</label>\r\n        {[\"Real\", \"Animation\", \"Skeleton\"].map((type) => (\r\n          <label key={type}>\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"video-type\"\r\n              name=\"video-type\"\r\n              value={type}\r\n              checked={videoTypes[type]}\r\n              onChange={handleInputChange}\r\n            />\r\n            {type}\r\n          </label>\r\n        ))}\r\n        <div className=\"button\">\r\n          <button type=\"button\" id=\"searchButton\" onClick={handleSearch}>\r\n            Tìm kiếm\r\n          </button>\r\n          <VoiceInput word={word} setWord={setWord} />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n\r\n      <label htmlFor=\"video-type\">Chọn kiểu video muốn xem:</label>\r\n    {[\"Real\", \"Animation\", \"Skeleton\"].map((type) => (\r\n      <label key={type}>\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"video-type\"\r\n          name=\"video-type\"\r\n          value={type}\r\n          checked={videoTypes[type]}\r\n          onChange={handleInputChange}\r\n        />\r\n        {type}\r\n      </label>\r\n    ))}\r\n*/\r\n\r\nimport React, { useState } from 'react';\r\nimport \"./SearchForm.css\";\r\nimport searchAndPlayVideo from \"./searchAndPlayVideo\";\r\nimport VoiceInput from \"./VoiceInput\";\r\n\r\nconst SearchForm = () => {\r\n  const [word, setWord] = useState(\"\");\r\n  /*\r\n  const [videoTypes, setVideoTypes] = useState({\r\n    Real: false,\r\n    Animation: false,\r\n    Skeleton: false,\r\n  });\r\n  */\r\n  const handleInputChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    if (type === \"checkbox\") {\r\n      setVideoTypes({ ...videoTypes, [value]: checked });\r\n    } else {\r\n      setWord(value);\r\n    }\r\n  };\r\n  \r\n  const handleSearch = () => {\r\n    searchAndPlayVideo(word);\r\n  };\r\n\r\n  return (\r\n    <div className=\"text\">\r\n      <form>\r\n        <label htmlFor=\"word\">Nhập từ cần tìm:</label>\r\n        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n          <input\r\n            type=\"text\"\r\n            id=\"word\"\r\n            name=\"word\"\r\n            placeholder=\"Nhập từ vào đây\"\r\n            value={word}\r\n            onChange={handleInputChange}\r\n          />\r\n          <div className=\"button\">\r\n            <button type=\"button\" id=\"searchButton\" onClick={handleSearch}>\r\n              Tìm kiếm\r\n            </button>\r\n            <VoiceInput word={word} setWord={setWord} />\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}