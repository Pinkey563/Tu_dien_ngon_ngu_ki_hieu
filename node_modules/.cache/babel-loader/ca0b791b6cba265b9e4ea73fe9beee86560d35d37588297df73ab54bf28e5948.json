{"ast":null,"code":"function searchAndPlayVideo(word) {\n  const inputWord = word.toLowerCase();\n  const csvUrl = \"1_1000_data.csv\"; // Relative path to the CSV file\n  //const skeFolder = \"/vidSke/\";\n  const aniFolder = \"/animeQIPEDCVid/animeQIPEDCVid/full/\";\n  const realVideo = document.querySelector(\".real\");\n  const animationVideo = document.querySelector(\".animation\");\n  //const skeletonVideo = document.querySelector(\".skeleton\");\n\n  fetch(csvUrl).then(response => response.text()).then(text => {\n    const lines = text.split(\"\\n\");\n    let videoUrl = \"\";\n    let animationVideoPath = \"\";\n    //let skeletonVideoPath = \"\";\n    /*\r\n    const realChecked = videoTypes.Real;\r\n    const animationChecked = videoTypes.Animation;\r\n    const skeletonChecked = videoTypes.Skeleton;\r\n    */\n    for (const line of lines) {\n      const row = line.split(\",\");\n      const word = row[0].toLowerCase();\n      const videoId = row[2];\n      if (word === inputWord) {\n        videoUrl = row[1];\n        animationVideoPath = Number(videoId) > 200 ? aniFolder + \"stylized_\" + (Number(videoId) + 1) + \".mp4\" : aniFolder + \"stylized_\" + videoId + \".mp4\";\n        //skeletonVideoPath = skeFolder + videoId + \".webm\";\n        break;\n      }\n      if (videoUrl && animationVideoPath) {\n        realVideo.src = videoUrl;\n        animationVideo.src = animationVideoPath;\n        //skeletonVideo.src = skeletonVideoPath : \"\";\n\n        realVideo.style.visibility = \"visible\";\n        animationVideo.style.visibility = \"visible\";\n        //skeletonVideo.style.visibility = skeletonChecked ? \"visible\" : \"hidden\";\n      } else {\n        alert(\"Không tìm thấy từ này trong từ điển.\");\n      }\n    }\n  }).catch(error => {\n    console.error(\"Error fetching CSV file:\", error);\n  });\n}\n;\nexport default searchAndPlayVideo;","map":{"version":3,"names":["searchAndPlayVideo","word","inputWord","toLowerCase","csvUrl","aniFolder","realVideo","document","querySelector","animationVideo","fetch","then","response","text","lines","split","videoUrl","animationVideoPath","line","row","videoId","Number","src","style","visibility","alert","catch","error","console"],"sources":["C:/Users/Tran Anh Duc/Downloads/Web Sign React/src/searchAndPlayVideo.jsx"],"sourcesContent":["function searchAndPlayVideo(word) {\r\n  const inputWord = word.toLowerCase();\r\n  const csvUrl = \"1_1000_data.csv\"; // Relative path to the CSV file\r\n  //const skeFolder = \"/vidSke/\";\r\n  const aniFolder = \"/animeQIPEDCVid/animeQIPEDCVid/full/\";\r\n  const realVideo = document.querySelector(\".real\");\r\n  const animationVideo = document.querySelector(\".animation\");\r\n  //const skeletonVideo = document.querySelector(\".skeleton\");\r\n\r\n  fetch(csvUrl)\r\n    .then((response) => response.text())\r\n    .then((text) => {\r\n      const lines = text.split(\"\\n\");\r\n      let videoUrl = \"\";\r\n      let animationVideoPath = \"\";\r\n      //let skeletonVideoPath = \"\";\r\n      /*\r\n      const realChecked = videoTypes.Real;\r\n      const animationChecked = videoTypes.Animation;\r\n      const skeletonChecked = videoTypes.Skeleton;\r\n      */\r\n      for (const line of lines) {\r\n        const row = line.split(\",\");\r\n        const word = row[0].toLowerCase();\r\n        const videoId = row[2];\r\n\r\n        if (word === inputWord) {\r\n          videoUrl = row[1];\r\n          animationVideoPath = (Number(videoId) > 200) ? aniFolder + \"stylized_\" + (Number(videoId) + 1) + \".mp4\" : aniFolder + \"stylized_\" + videoId + \".mp4\";\r\n          //skeletonVideoPath = skeFolder + videoId + \".webm\";\r\n          break;\r\n      }\r\n      if (videoUrl && animationVideoPath) {\r\n        realVideo.src = videoUrl;\r\n        animationVideo.src = animationVideoPath;\r\n      //skeletonVideo.src = skeletonVideoPath : \"\";\r\n\r\n        realVideo.style.visibility = \"visible\";\r\n        animationVideo.style.visibility = \"visible\";\r\n      //skeletonVideo.style.visibility = skeletonChecked ? \"visible\" : \"hidden\";\r\n      }\r\n      else {\r\n        alert(\"Không tìm thấy từ này trong từ điển.\");\r\n      }\r\n    }})\r\n    .catch((error) => {\r\n      console.error(\"Error fetching CSV file:\", error);\r\n    });\r\n};\r\n\r\nexport default searchAndPlayVideo;\r\n\r\n"],"mappings":"AAAA,SAASA,kBAAkBA,CAACC,IAAI,EAAE;EAChC,MAAMC,SAAS,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC;EACpC,MAAMC,MAAM,GAAG,iBAAiB,CAAC,CAAC;EAClC;EACA,MAAMC,SAAS,GAAG,sCAAsC;EACxD,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;EACjD,MAAMC,cAAc,GAAGF,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC;EAC3D;;EAEAE,KAAK,CAACN,MAAM,CAAC,CACVO,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEE,IAAI,IAAK;IACd,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;IAC9B,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAIC,kBAAkB,GAAG,EAAE;IAC3B;IACA;AACN;AACA;AACA;AACA;IACM,KAAK,MAAMC,IAAI,IAAIJ,KAAK,EAAE;MACxB,MAAMK,GAAG,GAAGD,IAAI,CAACH,KAAK,CAAC,GAAG,CAAC;MAC3B,MAAMd,IAAI,GAAGkB,GAAG,CAAC,CAAC,CAAC,CAAChB,WAAW,CAAC,CAAC;MACjC,MAAMiB,OAAO,GAAGD,GAAG,CAAC,CAAC,CAAC;MAEtB,IAAIlB,IAAI,KAAKC,SAAS,EAAE;QACtBc,QAAQ,GAAGG,GAAG,CAAC,CAAC,CAAC;QACjBF,kBAAkB,GAAII,MAAM,CAACD,OAAO,CAAC,GAAG,GAAG,GAAIf,SAAS,GAAG,WAAW,IAAIgB,MAAM,CAACD,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,GAAGf,SAAS,GAAG,WAAW,GAAGe,OAAO,GAAG,MAAM;QACpJ;QACA;MACJ;MACA,IAAIJ,QAAQ,IAAIC,kBAAkB,EAAE;QAClCX,SAAS,CAACgB,GAAG,GAAGN,QAAQ;QACxBP,cAAc,CAACa,GAAG,GAAGL,kBAAkB;QACzC;;QAEEX,SAAS,CAACiB,KAAK,CAACC,UAAU,GAAG,SAAS;QACtCf,cAAc,CAACc,KAAK,CAACC,UAAU,GAAG,SAAS;QAC7C;MACA,CAAC,MACI;QACHC,KAAK,CAAC,sCAAsC,CAAC;MAC/C;IACF;EAAC,CAAC,CAAC,CACFC,KAAK,CAAEC,KAAK,IAAK;IAChBC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EAClD,CAAC,CAAC;AACN;AAAC;AAED,eAAe3B,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}