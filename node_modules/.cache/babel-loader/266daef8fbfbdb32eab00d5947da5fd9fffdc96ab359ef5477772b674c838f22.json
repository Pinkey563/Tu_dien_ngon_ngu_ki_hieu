{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nconst speechToText = options => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState(\"\");\n  const recognitionRef = useRef(null);\n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window)) {\n      console.error(\"Web speech API is not supported.\");\n      return;\n    }\n    recognitionRef.current = new window.webkitSpeechRecognition();\n    const recognition = recognitionRef.current;\n    recognition.interimResults = options.interimResults || false;\n    recognition.lang = \"vi-VN\";\n    recognition.continuous = options.continuous || false;\n    recognition.onresult = event => {\n      let text = \"\";\n      for (let i = 0; i < event.results.length; i++) {\n        text += event.results[i][0].transcript;\n      }\n      setTranscript(text);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n    return () => {\n      recognition.stop();\n    };\n  }, []);\n  const startListening = () => {\n    if (recognitionRef.current && !isListening) {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n  const stopListening = () => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n  return {\n    isListening,\n    transcript,\n    startListening,\n    stopListening\n  };\n};\n_s(speechToText, \"QnnGFSlBl1NXLKFdyXw22FJ8iG4=\");\nexport default speechToText;","map":{"version":3,"names":["useState","useRef","useEffect","speechToText","options","_s","isListening","setIsListening","transcript","setTranscript","recognitionRef","window","console","error","current","webkitSpeechRecognition","recognition","interimResults","lang","continuous","onresult","event","text","i","results","length","onerror","onend","stop","startListening","start","stopListening"],"sources":["C:/Users/Tran Anh Duc/Downloads/Web Sign React/src/speechToText.jsx"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\r\n\r\nconst speechToText = (options) => {\r\n    const [isListening, setIsListening] = useState(false);\r\n    const [transcript, setTranscript] = useState(\"\");\r\n    const recognitionRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (!('webkitSpeechRecognition' in window)) {\r\n            console.error(\"Web speech API is not supported.\");\r\n            return;\r\n        }\r\n\r\n        recognitionRef.current = new window.webkitSpeechRecognition();\r\n        const recognition = recognitionRef.current;\r\n        recognition.interimResults = options.interimResults || false;\r\n        recognition.lang = \"vi-VN\";\r\n        recognition.continuous = options.continuous || false;\r\n\r\n        recognition.onresult = (event) => {\r\n            let text = \"\";\r\n            for (let i = 0; i < event.results.length; i++) {\r\n                text += event.results[i][0].transcript;\r\n            }\r\n            setTranscript(text);\r\n        };\r\n\r\n        recognition.onerror = (event) => {\r\n            console.error(\"Speech recognition error:\", event.error);\r\n        };\r\n\r\n        recognition.onend = () => {\r\n            setIsListening(false);\r\n        };\r\n\r\n        return () => {\r\n            recognition.stop();\r\n        };\r\n    }, []);\r\n\r\n    const startListening = () => {\r\n        if (recognitionRef.current && !isListening) {\r\n            recognitionRef.current.start();\r\n            setIsListening(true);\r\n        }\r\n    };\r\n\r\n    const stopListening = () => {\r\n        if (recognitionRef.current && isListening) {\r\n            recognitionRef.current.stop();\r\n            setIsListening(false);\r\n        }\r\n    };\r\n\r\n    return { isListening, transcript, startListening, stopListening };\r\n};\r\n\r\nexport default speechToText;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAEnD,MAAMC,YAAY,GAAIC,OAAO,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMU,cAAc,GAAGT,MAAM,CAAC,IAAI,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACZ,IAAI,EAAE,yBAAyB,IAAIS,MAAM,CAAC,EAAE;MACxCC,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAC;MACjD;IACJ;IAEAH,cAAc,CAACI,OAAO,GAAG,IAAIH,MAAM,CAACI,uBAAuB,CAAC,CAAC;IAC7D,MAAMC,WAAW,GAAGN,cAAc,CAACI,OAAO;IAC1CE,WAAW,CAACC,cAAc,GAAGb,OAAO,CAACa,cAAc,IAAI,KAAK;IAC5DD,WAAW,CAACE,IAAI,GAAG,OAAO;IAC1BF,WAAW,CAACG,UAAU,GAAGf,OAAO,CAACe,UAAU,IAAI,KAAK;IAEpDH,WAAW,CAACI,QAAQ,GAAIC,KAAK,IAAK;MAC9B,IAAIC,IAAI,GAAG,EAAE;MACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,OAAO,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;QAC3CD,IAAI,IAAID,KAAK,CAACG,OAAO,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAACf,UAAU;MAC1C;MACAC,aAAa,CAACa,IAAI,CAAC;IACvB,CAAC;IAEDN,WAAW,CAACU,OAAO,GAAIL,KAAK,IAAK;MAC7BT,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEQ,KAAK,CAACR,KAAK,CAAC;IAC3D,CAAC;IAEDG,WAAW,CAACW,KAAK,GAAG,MAAM;MACtBpB,cAAc,CAAC,KAAK,CAAC;IACzB,CAAC;IAED,OAAO,MAAM;MACTS,WAAW,CAACY,IAAI,CAAC,CAAC;IACtB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB,IAAInB,cAAc,CAACI,OAAO,IAAI,CAACR,WAAW,EAAE;MACxCI,cAAc,CAACI,OAAO,CAACgB,KAAK,CAAC,CAAC;MAC9BvB,cAAc,CAAC,IAAI,CAAC;IACxB;EACJ,CAAC;EAED,MAAMwB,aAAa,GAAGA,CAAA,KAAM;IACxB,IAAIrB,cAAc,CAACI,OAAO,IAAIR,WAAW,EAAE;MACvCI,cAAc,CAACI,OAAO,CAACc,IAAI,CAAC,CAAC;MAC7BrB,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC;EAED,OAAO;IAAED,WAAW;IAAEE,UAAU;IAAEqB,cAAc;IAAEE;EAAc,CAAC;AACrE,CAAC;AAAC1B,EAAA,CArDIF,YAAY;AAuDlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}