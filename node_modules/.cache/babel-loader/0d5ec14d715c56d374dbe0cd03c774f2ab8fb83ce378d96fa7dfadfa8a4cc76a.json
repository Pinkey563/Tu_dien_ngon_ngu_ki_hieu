{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nconst speechToText = options => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState(\"\");\n  const recognitionRef = useRef(null);\n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window)) {\n      console.error(\"Web speech API is not supported.\");\n      return;\n    }\n    recognitionRef.current = new window.webkitSpeechRecognition();\n    const recognition = recognitionRef.current;\n    recognition.interimResults = options.interimResults || true;\n    recognition.lang = \"vi-VN\";\n    recognition.continuous = options.continuous || false;\n    recognition.onresult = event => {\n      let finalTranscript = \"\";\n      let interimTranscript = \"\";\n      for (let i = 0; i < event.results.length; i++) {\n        if (event.results[i].isFinal) {\n          finalTranscript += event.results[i][0].transcript;\n        } else {\n          interimTranscript += event.results[i][0].transcript;\n        }\n      }\n      setTranscript(finalTranscript);\n      setInterimTranscript(interimTranscript);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n    return () => {\n      recognition.stop();\n    };\n  }, []);\n  const startListening = () => {\n    if (recognitionRef.current && !isListening) {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n  const stopListening = () => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n  return {\n    isListening,\n    transcript,\n    interimTranscript,\n    startListening,\n    stopListening\n  };\n};\n_s(speechToText, \"QnnGFSlBl1NXLKFdyXw22FJ8iG4=\");\nexport default speechToText;","map":{"version":3,"names":["React","useState","useRef","useEffect","speechToText","options","_s","isListening","setIsListening","transcript","setTranscript","recognitionRef","window","console","error","current","webkitSpeechRecognition","recognition","interimResults","lang","continuous","onresult","event","finalTranscript","interimTranscript","i","results","length","isFinal","setInterimTranscript","onerror","onend","stop","startListening","start","stopListening"],"sources":["C:/Users/Tran Anh Duc/Downloads/Web Sign React/src/speechToText.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst speechToText = (options) => {\r\n    const [isListening, setIsListening] = useState(false);\r\n    const [transcript, setTranscript] = useState(\"\");\r\n    const recognitionRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (!('webkitSpeechRecognition' in window)) {\r\n            console.error(\"Web speech API is not supported.\");\r\n            return;\r\n        }\r\n\r\n        recognitionRef.current = new window.webkitSpeechRecognition();\r\n        const recognition = recognitionRef.current;\r\n        recognition.interimResults = options.interimResults || true;\r\n        recognition.lang = \"vi-VN\";\r\n        recognition.continuous = options.continuous || false;\r\n\r\n        recognition.onresult = (event) => {\r\n            let finalTranscript = \"\";\r\n            let interimTranscript = \"\";\r\n\r\n            for (let i = 0; i < event.results.length; i++) {\r\n                if (event.results[i].isFinal) {\r\n                    finalTranscript += event.results[i][0].transcript;\r\n                } else {\r\n                    interimTranscript += event.results[i][0].transcript;\r\n                }\r\n            }\r\n\r\n            setTranscript(finalTranscript);\r\n            setInterimTranscript(interimTranscript);\r\n        };\r\n\r\n        recognition.onerror = (event) => {\r\n            console.error(\"Speech recognition error:\", event.error);\r\n        };\r\n\r\n        recognition.onend = () => {\r\n            setIsListening(false);\r\n        };\r\n\r\n        return () => {\r\n            recognition.stop();\r\n        };\r\n    }, []);\r\n\r\n    const startListening = () => {\r\n        if (recognitionRef.current && !isListening) {\r\n            recognitionRef.current.start();\r\n            setIsListening(true);\r\n        }\r\n    };\r\n\r\n    const stopListening = () => {\r\n        if (recognitionRef.current && isListening) {\r\n            recognitionRef.current.stop();\r\n            setIsListening(false);\r\n        }\r\n    };\r\n\r\n    return { isListening, transcript, interimTranscript, startListening, stopListening };\r\n};\r\n\r\nexport default speechToText;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAE1D,MAAMC,YAAY,GAAIC,OAAO,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMU,cAAc,GAAGT,MAAM,CAAC,IAAI,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACZ,IAAI,EAAE,yBAAyB,IAAIS,MAAM,CAAC,EAAE;MACxCC,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAC;MACjD;IACJ;IAEAH,cAAc,CAACI,OAAO,GAAG,IAAIH,MAAM,CAACI,uBAAuB,CAAC,CAAC;IAC7D,MAAMC,WAAW,GAAGN,cAAc,CAACI,OAAO;IAC1CE,WAAW,CAACC,cAAc,GAAGb,OAAO,CAACa,cAAc,IAAI,IAAI;IAC3DD,WAAW,CAACE,IAAI,GAAG,OAAO;IAC1BF,WAAW,CAACG,UAAU,GAAGf,OAAO,CAACe,UAAU,IAAI,KAAK;IAEpDH,WAAW,CAACI,QAAQ,GAAIC,KAAK,IAAK;MAC9B,IAAIC,eAAe,GAAG,EAAE;MACxB,IAAIC,iBAAiB,GAAG,EAAE;MAE1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,OAAO,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;QAC3C,IAAIH,KAAK,CAACI,OAAO,CAACD,CAAC,CAAC,CAACG,OAAO,EAAE;UAC1BL,eAAe,IAAID,KAAK,CAACI,OAAO,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAChB,UAAU;QACrD,CAAC,MAAM;UACHe,iBAAiB,IAAIF,KAAK,CAACI,OAAO,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAChB,UAAU;QACvD;MACJ;MAEAC,aAAa,CAACa,eAAe,CAAC;MAC9BM,oBAAoB,CAACL,iBAAiB,CAAC;IAC3C,CAAC;IAEDP,WAAW,CAACa,OAAO,GAAIR,KAAK,IAAK;MAC7BT,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEQ,KAAK,CAACR,KAAK,CAAC;IAC3D,CAAC;IAEDG,WAAW,CAACc,KAAK,GAAG,MAAM;MACtBvB,cAAc,CAAC,KAAK,CAAC;IACzB,CAAC;IAED,OAAO,MAAM;MACTS,WAAW,CAACe,IAAI,CAAC,CAAC;IACtB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB,IAAItB,cAAc,CAACI,OAAO,IAAI,CAACR,WAAW,EAAE;MACxCI,cAAc,CAACI,OAAO,CAACmB,KAAK,CAAC,CAAC;MAC9B1B,cAAc,CAAC,IAAI,CAAC;IACxB;EACJ,CAAC;EAED,MAAM2B,aAAa,GAAGA,CAAA,KAAM;IACxB,IAAIxB,cAAc,CAACI,OAAO,IAAIR,WAAW,EAAE;MACvCI,cAAc,CAACI,OAAO,CAACiB,IAAI,CAAC,CAAC;MAC7BxB,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC;EAED,OAAO;IAAED,WAAW;IAAEE,UAAU;IAAEe,iBAAiB;IAAES,cAAc;IAAEE;EAAc,CAAC;AACxF,CAAC;AAAC7B,EAAA,CA7DIF,YAAY;AA+DlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}